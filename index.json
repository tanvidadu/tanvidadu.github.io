[{"categories":null,"contents":"","permalink":"https://tanvidadu.github.io/projects/contributions/gsoc/","tags":["Java","Android","REST APIs"],"title":"Google Summer of Code: Feedback on how pictures uploaded to Commons get used"},{"categories":null,"contents":"","permalink":"https://tanvidadu.github.io/projects/creations/gsoc/","tags":["Java","Android","REST APIs"],"title":"Google Summer of Code: Feedback on how pictures uploaded to Commons get used"},{"categories":null,"contents":"","permalink":"https://tanvidadu.github.io/publications/offenseeval/","tags":["offense detection","natural language processing","social media analysis"],"title":"Cross-lingual Inductive Transfer to Detect Offensive Language"},{"categories":null,"contents":"","permalink":"https://tanvidadu.github.io/publications/codeswitch/","tags":["data optimization","natural language processing","social media analysis"],"title":"Towards Code-switched Classification Exploiting Constituent Language Resources"},{"categories":null,"contents":"","permalink":"https://tanvidadu.github.io/publications/sarcasmdetection/","tags":["sarcasm detection","natural language processing","social media analysis"],"title":"Sarcasm Detection using Context Separators in Online Discours7"},{"categories":null,"contents":"","permalink":"https://tanvidadu.github.io/publications/subjectivebias/","tags":["bias detection","natural language processing"],"title":"Towards Detection of Subjective Bias using Contextualized Word Embeddings"},{"categories":null,"contents":"","permalink":"https://tanvidadu.github.io/publications/alldaydevops/","tags":["emotion recognition","sentiment analysis","natural language processing","social media analysis"],"title":"BERT-based Ensembles for Modeling Disclosure and Support in Conversational Social Media Text."},{"categories":null,"contents":"Chatbots are often used online and in messaging apps, but are also now included in many operating systems as intelligent virtual assistants, such as Siri for Apple products and Cortana for Windows. Dedicated chatbot appliances are also becoming increasingly common, such as Amazon\u0026rsquo;s Alexa. These chatbots can perform a wide variety of functions based on user commands. Non-goal-oriented dialogue systems (chatbots) are an interesting test-bed for interactive Natural Language Processing (NLP) systems and are also directly useful in a wide range of applications ranging from technical support services to entertainment. However, building intelligent conversational agents remains an unsolved problem in artificial intelligence research. Recently, recurrent neural network-based models with sufficient capacity and access to large datasets attracted a large interest when first attempted. Vinyals and Le (2015) showed that they were capable of generating meaningful responses in some chit-chat settings. Still, further inquiries in the capabilities of these neural network architectures and developments (Serban et al., 2016; Miao, Yu, and Blunsom, 2015; Sordoni et al., 2015; Serban et al., 2017; Li, Monroe, and Jurafsky, 2016; Li et al., 2017) indicated that they were limited which made communicating with them a rather unsatisfying experience for human beings.\nThe chatbots currently being used are very domain-specific. Through the project, we try to create a general-purpose chatbot.\n","permalink":"https://tanvidadu.github.io/projects/contributions/personabot/","tags":["Chatbot","natural language processing","persona analysis","python","pytorch"],"title":"PERSONABOT : PERSON OR MACHINE"},{"categories":null,"contents":"Chatbots are often used online and in messaging apps, but are also now included in many operating systems as intelligent virtual assistants, such as Siri for Apple products and Cortana for Windows. Dedicated chatbot appliances are also becoming increasingly common, such as Amazon\u0026rsquo;s Alexa. These chatbots can perform a wide variety of functions based on user commands. Non-goal-oriented dialogue systems (chatbots) are an interesting test-bed for interactive Natural Language Processing (NLP) systems and are also directly useful in a wide range of applications ranging from technical support services to entertainment. However, building intelligent conversational agents remains an unsolved problem in artificial intelligence research. Recently, recurrent neural network-based models with sufficient capacity and access to large datasets attracted a large interest when first attempted. Vinyals and Le (2015) showed that they were capable of generating meaningful responses in some chit-chat settings. Still, further inquiries in the capabilities of these neural network architectures and developments (Serban et al., 2016; Miao, Yu, and Blunsom, 2015; Sordoni et al., 2015; Serban et al., 2017; Li, Monroe, and Jurafsky, 2016; Li et al., 2017) indicated that they were limited which made communicating with them a rather unsatisfying experience for human beings.\nThe chatbots currently being used are very domain-specific. Through the project, we try to create a general-purpose chatbot.\n","permalink":"https://tanvidadu.github.io/projects/creations/personabot/","tags":["Chatbot","natural language processing","persona analysis","python","pytorch"],"title":"PERSONABOT : PERSON OR MACHINE"},{"categories":null,"contents":"Intro Doesn\u0026rsquo;t matter whether it\u0026rsquo;s a CakePHP app for a client, your own personal CMS, or any other web based application. If your passing around passwords or other sensitive info you should really implement SSL. SSL provides 2 main perks to your visitors.\n First it encrypts all communication that flies across the web. This prevents curious or devious billies from getting your secrets. Secondly it ensures to the user that your server is in fact who it claims, and not a nasty \u0026lsquo;man in the middle\u0026quot; attack. Finally it gives your site that touch of class\u0026hellip;. which of course a classy person like yourself relies on.  Once you implement SSL certificates on your server you\u0026rsquo;ll want to require secure connections using Apache\u0026rsquo;s rewrite module. Now I won\u0026rsquo;t dwell on the creation and signing of certificates, its already well documented. If your just starting out though,heres a few links I recommend;\n Creating self-signed certificates (free, but should only be used internally or for testing, users will; see an \u0026lsquo;Untrusted\u0026quot; warning) Requesting a CA Signed certificate (not free, but the final certificate is trusted and seamless for users)  The second link uses the schools internal CA, you will need to pay a public CA like Entrust or Verisign. All of this information is aimed at \u0026lsquo;nix or solaris servers running apache. Why? cause a production windows server is laughable :-p\nNow that you have a certificate, whats next? So there you are you have a shiny new Certificate and Server key, how do you force visitors to your apache driven site to use the SSL? You copied the certificates into the appropite locations right? And you have made the needed changes in httpd.conf right? So now when you view https://example.com you see a \u0026lsquo;trusted\u0026rsquo; warning or your site right? If No to any of these than this article does a pretty good job of outlining those steps.\nThe SSL Works, How do I force connections to use it? First you need to decide if you want to force every page on your site to use SSL, or only a particular sub-domain, or maybe just your admin directory. Since the overhead is minimal there is no harm is forcing the entire domain to leverage SSL, but if it is a self-signed certificate for your personal use than you\u0026rsquo;ll most certainly want to restrict its use to your own areas. This prevents users from seeing that nasty warning \u0026ldquo;This server is not trusted\u0026rdquo; You\u0026rsquo;ll know if your using SSL because the url prefix changes from http to https (s for secure).\nForcing entire domain to use SSL You want any visit, any where to use ssl. This probably the simplest solution. Create or append to your htaccess file in the top directory of your server. Some people use a port check (80 is typically http, while 443 is https) but if you have alernate configs or the user just adds :8080 to the end of the url this method is useless. Instead check whether the https environmental variable is set, if not then redirect.\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://%{SERVER_NAME}$1 \\[R,L\\] Forcing sub-domains to use SSL Maybe you only want mysecretarea.example.com to use SSL, that\u0026rsquo;s easy enough. Its the same premise as above, but you move the htaccess file into the directory that corresponds to the subdomain. Also change the second line like below;\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://mysecretarea.%{SERVER_NAME}$1 \\[R,L\\] Forcing a directory to use SSL This method cn get a little hairier if your using aliases or redirects on top of this one. You\u0026rsquo;ll need to consider what order the commands are read. The basic principle is like so. You want all visits to example.com/admin to use ssl. Create a htaccess file in the parent directory. Again will check for the https variable, but this time we also check for the sub-directory to be in the path.\nRewriteCond %{HTTPS} !=on RewriteRule ^/admin/(.*)$ https://%{SERVER_NAME}/admin/$1 \\[R,L\\] ","permalink":"https://tanvidadu.github.io/blog/force-ssl/","tags":["apache","apache","redirect","rewrite","ssl","web development"],"title":"Forcing Visits to use SSL"},{"categories":null,"contents":"It’s a common practice among people to refer the internet or various easily accessible resources before they consult a doctor. This can often create a sense of panic and confusion if the sources are not reliable. In the case of skin diseases, where it might be very hard to describe the exact condition through verbal description, diagnosis through image recognition could be the future of skin disease detection. There already exist some applications which diagnose skin diseases through the textual description provided by the user. However, this very description can be questionable as the patient might accidentally distort the facts while providing the information. So, as tech enthusiasts, our teams believes that there’s a needs to devise a mechanism which will not be dependent only on the user’s textual description but rather, rely on factual information like images and videos.\nThis app incorporates image recognition to provide an accurate diagnosis of the skin disorder without any biases. This allows the users to narrow down the disease depending upon the images of the affected area. According to the disease detected, the app will provide some suggestion to prevent the disease from spreading further along with the contact of the nearest dermatologist that the patient can visit.\n","permalink":"https://tanvidadu.github.io/projects/contributions/dermahack/","tags":["Java","Spring","Android","Python","API"],"title":"DERMADOC: THE SKIN SPECIALIST APPLICATION"},{"categories":null,"contents":"It’s a common practice among people to refer the internet or various easily accessible resources before they consult a doctor. This can often create a sense of panic and confusion if the sources are not reliable. In the case of skin diseases, where it might be very hard to describe the exact condition through verbal description, diagnosis through image recognition could be the future of skin disease detection. There already exist some applications which diagnose skin diseases through the textual description provided by the user. However, this very description can be questionable as the patient might accidentally distort the facts while providing the information. So, as tech enthusiasts, our teams believes that there’s a needs to devise a mechanism which will not be dependent only on the user’s textual description but rather, rely on factual information like images and videos.\nThis app incorporates image recognition to provide an accurate diagnosis of the skin disorder without any biases. This allows the users to narrow down the disease depending upon the images of the affected area. According to the disease detected, the app will provide some suggestion to prevent the disease from spreading further along with the contact of the nearest dermatologist that the patient can visit.\n","permalink":"https://tanvidadu.github.io/projects/creations/dermahack/","tags":["Java","Spring","Android","Python","API"],"title":"DERMADOC: THE SKIN SPECIALIST APPLICATION"},{"categories":null,"contents":"Developed an Android application to detect fake human images.It differentiates GAN-generated face-images from real face-images.Methodology involved training ResNet-50 model on a publicly available datasetThe proposed architecture had an accuracy of 90%The trained model was deployed on a Django-based API and made available via Android application.","permalink":"https://tanvidadu.github.io/projects/contributions/deepfake/","tags":["Java","Django","computer vision","keras","android"],"title":"IMAGE FORGERY DETECTION APP"},{"categories":null,"contents":"Developed an Android application to detect fake human images.It differentiates GAN-generated face-images from real face-images.Methodology involved training ResNet-50 model on a publicly available datasetThe proposed architecture had an accuracy of 90%The trained model was deployed on a Django-based API and made available via Android application.","permalink":"https://tanvidadu.github.io/projects/creations/deepfake/","tags":["Docker","Maven","Java","Python","REST APIs","Bash/Shell"],"title":"IMAGE FORGERY DETECTION APP"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"https://tanvidadu.github.io/search/","tags":null,"title":"Search Results"}]